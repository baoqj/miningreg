// MiningReg SQLite Database Schema
// 加拿大采矿法规AI法律助手系统 - SQLite版本

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ================================
// 用户管理 (User Management)
// ================================

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String?
  image             String?
  password          String?
  title             String?
  role              UserRole @default(USER)
  language          String   @default("en")
  timezone          String   @default("America/Toronto")
  isActive          Boolean  @default(true)
  emailVerified     DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  accounts          Account[]
  sessions          Session[]
  organizationMemberships OrganizationMembership[]
  projectMemberships ProjectMembership[]
  consultations     Consultation[]
  legalQueries      LegalQuery[]
  promptTemplates   PromptTemplate[]
  reports           Report[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// ================================
// 组织管理 (Organization Management)
// ================================

model Organization {
  id              String   @id @default(cuid())
  name            String
  description     String?
  type            OrganizationType @default(COMPANY)
  industry        String?
  size            OrganizationSize @default(SMALL)
  country         String   @default("CA")
  province        String?
  city            String?
  address         String?
  phone           String?
  website         String?
  logo            String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  memberships     OrganizationMembership[]
  projects        Project[]
  subscriptions   Subscription[]

  @@map("organizations")
}

model OrganizationMembership {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  role           OrganizationRole @default(MEMBER)
  status         MemberStatus @default(ACTIVE)
  joinedAt       DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_memberships")
}

// ================================
// 项目管理 (Project Management)
// ================================

model Project {
  id              String   @id @default(cuid())
  name            String
  description     String?
  type            ProjectType @default(MINING)
  status          ProjectStatus @default(PLANNING)
  priority        ProjectPriority @default(MEDIUM)
  startDate       DateTime?
  endDate         DateTime?
  budget          Float?
  location        String?
  coordinates     String?
  complianceScore Float?   @default(0.0)
  riskLevel       RiskLevel @default(MEDIUM)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  memberships     ProjectMembership[]
  consultations   Consultation[]
  legalQueries    LegalQuery[]
  reports         Report[]

  @@map("projects")
}

model ProjectMembership {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  role      ProjectRole @default(MEMBER)
  status    MemberStatus @default(ACTIVE)
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_memberships")
}

// ================================
// AI咨询系统 (AI Consultation System)
// ================================

model Consultation {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      ConsultationStatus @default(PENDING)
  priority    Priority @default(MEDIUM)
  category    String?
  jurisdiction String  @default("federal")
  language    String   @default("en")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  projectId   String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  messages    ConsultationMessage[]

  @@map("consultations")
}

model ConsultationMessage {
  id             String   @id @default(cuid())
  consultationId String
  role           MessageRole @default(USER)
  content        String
  metadata       String?
  createdAt      DateTime @default(now())

  consultation Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)

  @@map("consultation_messages")
}

// ================================
// 法律查询系统 (Legal Query System)
// ================================

model LegalQuery {
  id              String   @id @default(cuid())
  question        String
  context         String?
  jurisdiction    String   @default("federal")
  category        String?
  response        String?
  confidence      Float?   @default(0.0)
  status          QueryStatus @default(PENDING)
  language        String   @default("en")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId          String
  projectId       String?
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@map("legal_queries")
}

// ================================
// 提示模板系统 (Prompt Template System)
// ================================

model PromptTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String?
  language    String   @default("en")
  content     String
  variables   String?
  tags        String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("prompt_templates")
}

// ================================
// 报告系统 (Report System)
// ================================

model Report {
  id          String   @id @default(cuid())
  title       String
  type        ReportType @default(COMPLIANCE)
  status      ReportStatus @default(DRAFT)
  content     String?
  summary     String?
  metadata    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  projectId   String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@map("reports")
}

// ================================
// 订阅系统 (Subscription System)
// ================================

model Subscription {
  id               String   @id @default(cuid())
  organizationId   String
  stripeCustomerId String?  @unique
  stripePriceId    String?
  stripeCurrentPeriodEnd DateTime?
  plan             SubscriptionPlan @default(FREE)
  status           SubscriptionStatus @default(ACTIVE)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// ================================
// 枚举类型 (Enums)
// ================================

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum OrganizationType {
  COMPANY
  GOVERNMENT
  NGO
  ACADEMIC
  INDIVIDUAL
}

enum OrganizationSize {
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum OrganizationRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum ProjectType {
  MINING
  EXPLORATION
  ENVIRONMENTAL
  COMPLIANCE
  CONSULTATION
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectRole {
  OWNER
  MANAGER
  MEMBER
  VIEWER
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ConsultationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum QueryStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ReportType {
  COMPLIANCE
  ENVIRONMENTAL
  LEGAL
  FINANCIAL
  TECHNICAL
}

enum ReportStatus {
  DRAFT
  REVIEW
  APPROVED
  PUBLISHED
}

enum SubscriptionPlan {
  FREE
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
}
