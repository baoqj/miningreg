// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password auth
  role          UserRole  @default(USER)
  title         String?   // Job title like "Senior Legal Analyst"
  phone         String?
  language      String    @default("en")
  timezone      String    @default("America/Toronto")
  
  // Preferences
  jurisdictionPreferences JurisdictionPreference[]
  notificationSettings   NotificationSettings?
  
  // Relationships
  accounts      Account[]
  sessions      Session[]
  organizationMemberships OrganizationMembership[]
  teamMemberships TeamMembership[]
  subscriptions Subscription[]
  invitations   Invitation[]

  // New relationships for extended functionality
  projects      Project[]
  projectMemberships ProjectMembership[]
  documents     Document[]
  consultations Consultation[]
  legalQueries  LegalQuery[]
  promptTemplates PromptTemplate[]
  reports       Report[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User roles
enum UserRole {
  USER
  TEAM_ADMIN
  ORG_ADMIN
  SUPER_ADMIN
}

// Organizations
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  website     String?
  industry    String?
  size        String?  // "1-10", "11-50", "51-200", "201-1000", "1000+"
  
  // Settings
  settings    OrganizationSettings?
  
  // Relationships
  memberships OrganizationMembership[]
  teams       Team[]
  subscriptions Subscription[]
  invitations Invitation[]
  projects    Project[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrganizationMembership {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  role           OrgRole  @default(MEMBER)
  joinedAt       DateTime @default(now())
  
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, organizationId])
}

enum OrgRole {
  MEMBER
  ADMIN
  OWNER
}

// Teams within organizations
model Team {
  id             String   @id @default(cuid())
  name           String
  description    String?
  organizationId String
  
  organization Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  memberships  TeamMembership[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamMembership {
  id     String   @id @default(cuid())
  userId String
  teamId String
  role   TeamRole @default(MEMBER)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
}

enum TeamRole {
  MEMBER
  LEAD
  ADMIN
}

// Invitations
model Invitation {
  id             String           @id @default(cuid())
  email          String
  token          String           @unique
  type           InvitationType
  role           String           // Role to assign when accepted
  organizationId String?
  teamId         String?
  invitedBy      String
  expiresAt      DateTime
  acceptedAt     DateTime?
  
  inviter      User          @relation(fields: [invitedBy], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
}

enum InvitationType {
  ORGANIZATION
  TEAM
}

// Subscriptions
model Subscription {
  id             String           @id @default(cuid())
  type           SubscriptionType
  plan           SubscriptionPlan
  status         SubscriptionStatus @default(ACTIVE)
  userId         String?
  organizationId String?
  
  // Billing
  stripeCustomerId     String?
  stripeSubscriptionId String?
  stripePriceId        String?
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  
  user         User?         @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SubscriptionType {
  PERSONAL
  TEAM
  ORGANIZATION
}

enum SubscriptionPlan {
  FREE
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}

// User preferences
model JurisdictionPreference {
  id           String @id @default(cuid())
  userId       String
  jurisdiction String // "federal", "ontario", "bc", "alberta", "municipal"
  enabled      Boolean @default(true)
  priority     Int     @default(0)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, jurisdiction])
}

model NotificationSettings {
  id                    String  @id @default(cuid())
  userId                String  @unique
  
  // Email notifications
  emailLegalUpdates     Boolean @default(true)
  emailComplianceAlerts Boolean @default(true)
  emailRegulatoryChanges Boolean @default(true)
  emailTeamInvites      Boolean @default(true)
  emailReportReviews    Boolean @default(true)
  
  // In-app notifications
  inAppLegalUpdates     Boolean @default(true)
  inAppComplianceAlerts Boolean @default(true)
  inAppRegulatoryChanges Boolean @default(true)
  inAppTeamInvites      Boolean @default(true)
  inAppReportReviews    Boolean @default(true)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrganizationSettings {
  id             String @id @default(cuid())
  organizationId String @unique
  
  // Default jurisdiction preferences for new members
  defaultJurisdictions String @default("[]") // JSON array of jurisdictions
  
  // Branding
  primaryColor   String? @default("#1e3a8a")
  secondaryColor String? @default("#fbbf24")
  
  // Features
  enableTeams           Boolean @default(true)
  enableReportSharing   Boolean @default(true)
  enableExpertAccess    Boolean @default(false)
  requireTwoFactor      Boolean @default(false)
  
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

// ================================
// 项目管理 (Project Management)
// ================================

model Project {
  id              String   @id @default(cuid())
  name            String
  slug            String
  description     String?
  type            ProjectType @default(MINING)
  status          ProjectStatus @default(PLANNING)
  priority        ProjectPriority @default(MEDIUM)
  jurisdiction    String   @default("federal")
  location        String?
  coordinates     String?  // JSON: {lat, lng}
  startDate       DateTime?
  endDate         DateTime?
  budget          Decimal? @db.Decimal(15,2)
  complianceScore Float?   @default(0.0)
  riskLevel       RiskLevel @default(MEDIUM)
  organizationId  String
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // 关联关系
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator         User         @relation(fields: [createdBy], references: [id])
  memberships     ProjectMembership[]
  documents       Document[]
  consultations   Consultation[]
  legalQueries    LegalQuery[]
  reports         Report[]
  milestones      ProjectMilestone[]

  @@unique([organizationId, slug])
  @@map("projects")
}

model ProjectMembership {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  role      ProjectRole @default(MEMBER)
  status    MemberStatus @default(ACTIVE)
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_memberships")
}

model ProjectMilestone {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String?
  dueDate     DateTime
  status      MilestoneStatus @default(PENDING)
  priority    ProjectPriority @default(MEDIUM)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_milestones")
}
